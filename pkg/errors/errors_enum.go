// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package errors

import (
	"fmt"
	"strings"
)

const (
	// ErrorTypeInternal is a ErrorType of type internal.
	ErrorTypeInternal ErrorType = "internal"
	// ErrorTypeInvalidRequest is a ErrorType of type invalid_request.
	ErrorTypeInvalidRequest ErrorType = "invalid_request"
	// ErrorTypeConflict is a ErrorType of type conflict.
	ErrorTypeConflict ErrorType = "conflict"
	// ErrorTypeNotFound is a ErrorType of type not_found.
	ErrorTypeNotFound ErrorType = "not_found"
	// ErrorTypeUnauthorized is a ErrorType of type unauthorized.
	ErrorTypeUnauthorized ErrorType = "unauthorized"
	// ErrorTypeForbidden is a ErrorType of type forbidden.
	ErrorTypeForbidden ErrorType = "forbidden"
	// ErrorTypeUnknown is a ErrorType of type unknown.
	ErrorTypeUnknown ErrorType = "unknown"
	// ErrorTypeUpstream is a ErrorType of type upstream.
	ErrorTypeUpstream ErrorType = "upstream"
)

var ErrInvalidErrorType = fmt.Errorf("not a valid ErrorType, try [%s]", strings.Join(_ErrorTypeNames, ", "))

var _ErrorTypeNames = []string{
	string(ErrorTypeInternal),
	string(ErrorTypeInvalidRequest),
	string(ErrorTypeConflict),
	string(ErrorTypeNotFound),
	string(ErrorTypeUnauthorized),
	string(ErrorTypeForbidden),
	string(ErrorTypeUnknown),
	string(ErrorTypeUpstream),
}

// ErrorTypeNames returns a list of possible string values of ErrorType.
func ErrorTypeNames() []string {
	tmp := make([]string, len(_ErrorTypeNames))
	copy(tmp, _ErrorTypeNames)
	return tmp
}

// ErrorTypeValues returns a list of the values for ErrorType
func ErrorTypeValues() []ErrorType {
	return []ErrorType{
		ErrorTypeInternal,
		ErrorTypeInvalidRequest,
		ErrorTypeConflict,
		ErrorTypeNotFound,
		ErrorTypeUnauthorized,
		ErrorTypeForbidden,
		ErrorTypeUnknown,
		ErrorTypeUpstream,
	}
}

// String implements the Stringer interface.
func (x ErrorType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorType) IsValid() bool {
	_, err := ParseErrorType(string(x))
	return err == nil
}

var _ErrorTypeValue = map[string]ErrorType{
	"internal":        ErrorTypeInternal,
	"invalid_request": ErrorTypeInvalidRequest,
	"conflict":        ErrorTypeConflict,
	"not_found":       ErrorTypeNotFound,
	"unauthorized":    ErrorTypeUnauthorized,
	"forbidden":       ErrorTypeForbidden,
	"unknown":         ErrorTypeUnknown,
	"upstream":        ErrorTypeUpstream,
}

// ParseErrorType attempts to convert a string to a ErrorType.
func ParseErrorType(name string) (ErrorType, error) {
	if x, ok := _ErrorTypeValue[name]; ok {
		return x, nil
	}
	return ErrorType(""), fmt.Errorf("%s is %w", name, ErrInvalidErrorType)
}

func (x ErrorType) Ptr() *ErrorType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x ErrorType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ErrorType) UnmarshalText(text []byte) error {
	tmp, err := ParseErrorType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
