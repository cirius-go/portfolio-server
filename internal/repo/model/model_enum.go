// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// ContextKeyDebug is a ContextKey of type Debug.
	ContextKeyDebug ContextKey = "Debug"
)

var ErrInvalidContextKey = errors.New("not a valid ContextKey")

// String implements the Stringer interface.
func (x ContextKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ContextKey) IsValid() bool {
	_, err := ParseContextKey(string(x))
	return err == nil
}

var _ContextKeyValue = map[string]ContextKey{
	"Debug": ContextKeyDebug,
}

// ParseContextKey attempts to convert a string to a ContextKey.
func ParseContextKey(name string) (ContextKey, error) {
	if x, ok := _ContextKeyValue[name]; ok {
		return x, nil
	}
	return ContextKey(""), fmt.Errorf("%s is %w", name, ErrInvalidContextKey)
}

// MarshalText implements the text marshaller method.
func (x ContextKey) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ContextKey) UnmarshalText(text []byte) error {
	tmp, err := ParseContextKey(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
